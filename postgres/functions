-- vai vincular quartos padrao ao hotel ao cria-lo --
-- hotel com cod par é um hotel grande, com cod impar é hotel pequeno --
create or replace function cadastra_quartos() returns trigger as
$$
declare cont integer default 0;
begin
	if (new.codh % 2 = 0) then
		for cont in 1..10 loop
			insert into quartohotel values (new.codh, 100+cont, 0, 'single');
			insert into quartohotel values (new.codh, 200+cont, 0, 'single');
			insert into quartohotel values (new.codh, 300+cont, 0, 'single');
			insert into quartohotel values (new.codh, 400+cont, 0, 'duplo');
			insert into quartohotel values (new.codh, 500+cont, 0, 'duplo');
			if cont < 6 then
				insert into quartohotel values (new.codh, 600+cont, 0, 'casal');
				insert into quartohotel values (new.codh, 700+cont, 0, 'casal');
				if cont < 4 then
					insert into quartohotel values (new.codh, 800+cont, 0, 'suite');
					insert into quartohotel values (new.codh, 900+cont, 0, 'suite');
					insert into quartohotel values (new.codh, 1000+cont, 0, 'suite');
				end if;
			end if;
		end loop;
	else
		for cont in 1..10 loop
			insert into quartohotel values (new.codh, 100+cont, 0, 'single');
			insert into quartohotel values (new.codh, 200+cont, 0, 'single');
			insert into quartohotel values (new.codh, 300+cont, 0, 'duplo');
			insert into quartohotel values (new.codh, 400+cont, 0, 'duplo');
			insert into quartohotel values (new.codh, 500+cont, 0, 'casal');
		end loop;
	end if;
	
	return new;
end;
$$
language plpgsql;

create trigger cadastra_quartos after insert on hotel
	for each row execute procedure cadastra_quartos();
	
------------------------------------------------------------------------------------------------------
-- vai gerar nro a partir de 10 --
create or replace function cadastrar_cliente(nome text, endereco text, telefone text, cpf text) returns void as
$$
declare maxNro integer default 9;
begin
	if (select count(nro) from clientes) > 0 then
		select max(nro) into maxNro from clientes;
	end if;
	insert into clientes values (maxNro+1, nome, endereco, telefone, cpf);
end;
$$
language plpgsql;

---------------------------------------------------------------------------------------------------------
-- sempre que um novo hotel for criado o preço dos quartos deve ser setado --

create or replace function set_valor(single float, duplo float, casal float, suite float, codh integer) returns void as
$$
	update quartoHotel set preco = single where tipo = 'single' and codhotel = codh;
	update quartoHotel set preco = duplo where tipo = 'duplo' and codhotel = codh;
	update quartoHotel set preco = casal where tipo = 'casal' and codhotel = codh;
	update quartoHotel set preco = suite where tipo = 'suite' and codhotel = codh;
$$
language sql;

-----------------------------------------------------------------------------------------------------------
-- vai retornar o numero, andar e preco de todos os quartos de um tipo em um determinado hotel --

create or replace function quartos_tipo(tipoQuarto text, codh integer) returns table(num integer, andar integer, tipo text, preco float) as
$$
	select numquarto, andar, tipo, preco from quartohotel join quartos on numquarto = num
		where tipo = tipoQuarto and codhotel = codh;
$$
language sql;


-----------------------------------------------------------------------------------------------------------
-- vai mostrar os quartos disponiveis em um hotel de acordo com a data --

create or replace function quartos_disponiveis(dtcheckin date, dtcheckout date, codh integer) returns table(num integer, andar integer, tipo text, preco float) as
$$
	select num, andar, tipo, preco from quartohotel join quartos on numquarto = num
		where codhotel = codh and (numquarto, codhotel) not in (select numquarto, codhotel from estadia e
									  where e.codhotel = codh and ((dtcheckout between checkin and checkout) or (dtcheckin between checkin and checkout) or (dtcheckin < checkin and dtcheckout > checkout)));
$$
language sql;

------------------------------------------------------------------------------------------------------------
-- retorna a lista de empregados disponiveis em uma determinada data e hotel --

create or replace function empregado_disponivel(dt date, ncodhotel integer) returns table(nro integer, nome text) as
$$
	select nro, nome from empregados where nro not in (select nro from empregados join limpeza on nroempregado = nro
						       where codh = ncodhotel and data = dt) and codhotel = ncodhotel;
$$
language sql;

-----------------------------------------------------------------------------------------------------------
-- cadastrar reserva. Ao cadastrar uma reserva ele também gera uma estadia automaticamente --

create or replace function cadastrar_reserva(numquarto integer, codh integer, cpfCliente text, camaextra text, checkin date, checkout date) returns void as
$$
declare idreserva integer default 0;
		codestadia integer default 0;
		nrocliente integer;
begin
	select nro into nrocliente from clientes where cpf = cpfCliente;
	if (select count(id) from reserva) > 0 then
		select max(id) into idreserva from reserva;
		if (select count(code) from estadia) > 0 then
			select max(code) into codestadia from estadia;
		end if;
	else  
		if (select count(code) from estadia) > 0 then
			select max(code) into codestadia from estadia;
		end if;
	end if;
	
	insert into estadia values(codestadia+1, checkin, checkout, null, codh, numquarto);
	insert into reserva values(numquarto, codh, nrocliente, idreserva+1, codestadia+1, camaextra);		
end;
$$
language plpgsql;
------------------------------------------------------------------------------------------------------------
-- cadastrar servico --

create or replace function cadastrar_servico(tipo text, preco float) returns void as
$$
declare codservico integer default 10;
begin
	if (select count(cods) from servicos) > 0 then
		select max(cods) into codservico from servicos;
	end if;
	insert into servicos values(codservico+1, tipo, preco);
end;
$$
language plpgsql;
------------------------------------------------------------------------------------------------------------
-- calcular o valor de uma estadia pelo codigo --

create or replace function calcular_preco_estadia(ncode integer) returns float as
$$
declare soma float default 0.0;
        precoquarto float default 0.0;
		dtcheckin date;
		dtcheckout date;
		meses float default 0.0;
		dias float default 0.0;
		spreco float;
begin
	for spreco in (select preco from servicos join servicoestadia on cods = codservico where codestadia = ncode) loop
		soma := soma + spreco;
	end loop;
	select preco into precoquarto from quartohotel q join estadia e on e.numquarto = q.numquarto where e.code = ncode;
	select checkin, checkout into dtcheckin, dtcheckout from estadia where code = ncode;
	select extract(month from date_trunc('month', age(dtcheckout, dtcheckin))) into meses;
	select extract(day from date_trunc('day', age(dtcheckout, dtcheckin))) into dias;
	soma := soma + precoquarto*30*meses + precoquarto*dias;
	return soma;
end;
$$
language plpgsql;


-- retorna 1 se não esta disponivel e 0 se esta disponivel --

create or replace function esta_disponivel(numqt integer, codh integer, dt date) returns integer as
$$
declare i integer default 0;
begin
	select count(numQuarto) into i from estadia where numQuarto = numqt and codhotel = codh and dt between checkin and checkout;
	return i;
end;
$$
language plpgsql;



create or replace function trigger_estadia() returns trigger as
$$
declare cont integer default 0;
begin
    if TG_OP = 'UPDATE' then
        if (select count(code) from estadia where numquarto = new.numquarto and codhotel = new.codhotel
            and (new.checkin not between checkin and checkout) and (new.checkout not between checkin and checkout)
            and (new.checkin < checkin and new.checkout > checkout) and code != old.code) > 0 then
            raise exception 'Já existe reserva feita para esta data neste quarto!';
        end if;
    else
        if (select count(code) from estadia where numquarto = new.numquarto and codhotel = new.codhotel
            and (new.checkin not between checkin and checkout) and (new.checkout not between checkin and checkout)
            and (new.checkin < checkin and new.checkout > checkout) and code != old.code) > 0 then
            raise exception 'Já existe reserva feita para esta data neste quarto!';
        end if;
    end if;
    return new;
end;
$$
language plpgsql;

create trigger trigger_estadia before insert or update on estadia
    for each row execute procedure trigger_estadia();


create or replace function cpf_cliente() returns trigger as
$$
begin
	if TG_OP = 'UPDATE' then
		if (select count(nro) from clientes where cpf = new.cpf and cpf != old.cpf) then
			raise exception 'Já existe cliente cadastrado com este cpf!';
			return old;
		end if;
	else
		if (select count(nro) from clientes where cpf = new.cpf and cpf != old.cpf) then
			raise exception 'Já existe cliente cadastrado com este cpf!';
		end if;
	end if;
	return new;
end;
$$
language plpgsql;

create trigger cpf_cliente before insert or update on clientes
	for each row execute procedure cpf_cliente();


create or replace function get_estadias(codh int, dt date) returns table(checkin date, checkout date, nrocliente int, numquarto int) as
$$
    select checkin, checkout, nrocliente, numquarto from estadia where code not in (select codestadia from reserva) and codhotel = codh and dt between checkin and checkout
    union
    select e.checkin, e.checkout, r.nrocliente, e.numquarto from estadia e join reserva r on code = codestadia and e.codhotel = codh and dt between checkin and checkout
$$
language sql;

create or replace function cadastrar_estadia(dtcheckin date, dtcheckout date, cpfcliente text, numquarto integer, codh integer) returns void as
$$
declare cont integer default 0;
        numcliente integer;
begin
    select nro into numcliente from clientes where cpf = cpfcliente;
	if (select count(code) from estadia) > 0 then
    	select max(code) into cont from estadia;
	end if;
    insert into estadia values(cont+1, dtcheckin, dtcheckout, numcliente, codh, numquarto);
end;
$$
language plpgsql;

create or replace function cadastrar_servico_estadia(tiposervico text, dt date, numq integer, codh integer) returns void as
$$
declare coden integer;
        codsn integer;
begin
    select code into coden from estadia where numquarto = numq and codhotel = codh and dt between checkin and checkout;
    select cods into codsn from servicos where tipo = tiposervico;
    insert into servicoestadia values(codsn, coden, dt);
end;
$$
language plpgsql;
